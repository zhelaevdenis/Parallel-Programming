private(x) - директива, которая создаёт свою локальную переменную х в каждом паралельном регионе.
К локальной переменной другие потоки не могут обратиться, как и видеть её изменения. Если переменную не определить, то она останется неопределённой.
В приведенном коде будет выводится каждый номер потока и номер операции из цикла, но в конце будет выводится заранее заданное число 44, на которое потоки не будут влиять.

firstprivate(x) - директива, которая создаёт копию оригинального х, но инициализирует её отдельно в каждом потоке.
Так же не изменения не отслеживаются, обратиться к копии нельзя. 
В приведенном коде будет выводится каждый номер потока и номер операции из цикла, но в конце будет выводится заранее заданное число 44, на которое потоки не будут влиять.

lastprivate(x) - директива которая создаёт копию оригинального х. В конце в переменную х сохраняются результаты изменения последнего действия цикла.
В приведенном коде  выводится каждый номер потока и номер операции из цикла, но в конце будет выводится 10, тк это последняя операция над числом в цикле.

Сам код:
int main()
{
    int x = 44;
    #pragma omp parallel for private(x)
    for(int i = 0; i <= 10; i++){
        x=i;
        printf("Thread number: %d x: %d\n",omp_get_thread_num(),x);
    }
    printf("x is %d\n", x);
}
